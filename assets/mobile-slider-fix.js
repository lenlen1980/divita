// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ –±–ª–æ–∫–∞ 05 –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
(function() {
    'use strict';
    
    console.log('üì± Mobile Slider Auto-Close Fix v1.0 loading...');
    
    let isFixActive = false;
    let block05 = null;
    let observer = null;
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç—ã
    const CRITICAL_BREAKPOINTS = [700, 699, 768, 767];
    
    function findBlock05() {
        block05 = document.querySelector('[data-framer-name="05"]');
        if (block05) {
            console.log('‚úÖ Found Block 05 slider:', block05);
            return true;
        }
        console.log('‚ùå Block 05 not found, retrying...');
        return false;
    }
    
    function preventSliderHiding() {
        if (!block05) return;
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–∞–π–¥–µ—Ä–∞ –≤ –±–ª–æ–∫–µ 05
        const sliderElements = block05.querySelectorAll(`
            [data-framer-component-type],
            .framer-slide,
            [class*="slide"],
            [class*="slider"],
            [class*="carousel"],
            .hidden,
            [style*="display: none"],
            [style*="opacity: 0"],
            [style*="visibility: hidden"]
        `);
        
        sliderElements.forEach(element => {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
            element.style.display = '';
            element.style.opacity = '';
            element.style.visibility = '';
            element.style.transform = '';
            
            // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—ã–≤–∞—é—â–∏–µ –∫–ª–∞—Å—Å—ã
            element.classList.remove('hidden', 'hide', 'mobile-hidden', 'closed');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Å—Ç–∏–ª–∏
            element.style.setProperty('display', 'block', 'important');
            element.style.setProperty('opacity', '1', 'important');
            element.style.setProperty('visibility', 'visible', 'important');
        });
        
        console.log(`üîß Fixed ${sliderElements.length} slider elements`);
    }
    
    function setupMutationObserver() {
        if (observer) observer.disconnect();
        
        observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes') {
                    const element = mutation.target;
                    
                    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–ª–æ–∫–µ 05
                    if (block05 && block05.contains(element)) {
                        const style = element.style;
                        const classList = element.classList;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∫—Ç–æ-—Ç–æ —Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç
                        if (style.display === 'none' || 
                            style.opacity === '0' || 
                            style.visibility === 'hidden' ||
                            classList.contains('hidden')) {
                            
                            console.log('üö´ Preventing element hide in Block 05:', element);
                            
                            // –û—Ç–º–µ–Ω—è–µ–º —Å–∫—Ä—ã—Ç–∏–µ
                            style.display = '';
                            style.opacity = '';
                            style.visibility = '';
                            classList.remove('hidden', 'hide', 'mobile-hidden');
                        }
                    }
                }
            });
        });
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        observer.observe(document.body, {
            attributes: true,
            attributeFilter: ['style', 'class'],
            subtree: true
        });
        
        console.log('üëÅÔ∏è MutationObserver activated');
    }
    
    function handleResize() {
        const width = window.innerWidth;
        
        // –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞–º
        if (CRITICAL_BREAKPOINTS.includes(width)) {
            console.log(`üéØ Critical breakpoint detected: ${width}px`);
            setTimeout(preventSliderHiding, 10);
            setTimeout(preventSliderHiding, 100);
            setTimeout(preventSliderHiding, 500);
        }
        
        preventSliderHiding();
    }
    
    function overrideMatchMedia() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º window.matchMedia –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const originalMatchMedia = window.matchMedia;
        
        window.matchMedia = function(query) {
            const result = originalMatchMedia.call(this, query);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä
            if (query.includes('max-width') && (
                query.includes('700px') || 
                query.includes('699px') || 
                query.includes('768px')
            )) {
                console.log(`üîç Intercepted critical media query: ${query}`);
                
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º addListener/addEventListener
                const originalAddListener = result.addListener || result.addEventListener;
                if (originalAddListener) {
                    result.addListener = result.addEventListener = function(callback) {
                        const wrappedCallback = function(e) {
                            console.log(`üì∫ Media query changed: ${query}, matches: ${e.matches}`);
                            
                            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π callback
                            callback.call(this, e);
                            
                            // –ù–æ —Å—Ä–∞–∑—É –∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä
                            setTimeout(preventSliderHiding, 0);
                            setTimeout(preventSliderHiding, 10);
                            setTimeout(preventSliderHiding, 100);
                        };
                        
                        originalAddListener.call(result, wrappedCallback);
                    };
                }
            }
            
            return result;
        };
        
        console.log('üé≠ matchMedia intercepted');
    }
    
    function activateFix() {
        if (isFixActive) return;
        
        console.log('üöÄ Activating mobile slider fix...');
        
        if (!findBlock05()) {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –±–ª–æ–∫ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            setTimeout(activateFix, 500);
            return;
        }
        
        isFixActive = true;
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
        preventSliderHiding();
        setupMutationObserver();
        overrideMatchMedia();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', handleResize);
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        setInterval(preventSliderHiding, 2000);
        
        console.log('‚úÖ Mobile slider auto-close fix fully activated!');
    }
    
    // –ó–∞–ø—É—Å–∫
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', activateFix);
    } else {
        activateFix();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(activateFix, 1000);
    setTimeout(activateFix, 3000);
    setTimeout(activateFix, 5000);
    
})();

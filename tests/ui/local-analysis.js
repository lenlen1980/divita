const puppeteer = require('puppeteer');
const fs = require('fs');

async function analyzeLocalSite() {
    console.log('=== DIVITA Local Site Analysis ===');
    console.log('–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞\n');
    
    const browser = await puppeteer.launch({
        headless: true,
        ignoreHTTPSErrors: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox', 
            '--disable-dev-shm-usage',
            '--disable-web-security',
            '--allow-running-insecure-content',
            '--ignore-certificate-errors'
        ]
    });
    
    const page = await browser.newPage();
    
    try {
        console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞...');
        
        const startTime = Date.now();
        
        await page.goto('https://80.93.61.62', { 
            waitUntil: 'domcontentloaded',
            timeout: 15000 
        });
        
        const loadTime = Date.now() - startTime;
        
        console.log(`‚úÖ –°–∞–π—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ ${loadTime}ms`);
        
        // Detailed analysis
        const analysis = await page.evaluate(() => {
            return {
                // Basic info
                title: document.title,
                url: window.location.href,
                lang: document.documentElement.lang,
                
                // Meta info
                description: document.querySelector('meta[name="description"]')?.content || '',
                generator: document.querySelector('meta[name="generator"]')?.content || '',
                
                // Content structure
                hasMain: !!document.querySelector('main, [role="main"]'),
                hasNav: !!document.querySelector('nav, .nav'),
                hasFooter: !!document.querySelector('footer, .footer'),
                
                // Element counts
                elements: {
                    images: document.querySelectorAll('img').length,
                    links: document.querySelectorAll('a[href]').length,
                    buttons: document.querySelectorAll('button, .button').length,
                    forms: document.querySelectorAll('form').length,
                    scripts: document.querySelectorAll('script').length,
                    stylesheets: document.querySelectorAll('link[rel="stylesheet"]').length,
                    divs: document.querySelectorAll('div').length
                },
                
                // Content analysis
                bodyTextLength: document.body.innerText.length,
                containsFramer: document.body.innerHTML.includes('framer'),
                containsDivita: document.body.innerHTML.toLowerCase().includes('divita'),
                
                // First few lines of visible text
                visibleText: document.body.innerText.split('\n')
                    .filter(line => line.trim().length > 0)
                    .slice(0, 10)
                    .join('\n')
            };
        });
        
        // Performance analysis
        const performance = await page.evaluate(() => {
            if (window.performance && window.performance.timing) {
                const timing = window.performance.timing;
                return {
                    domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,
                    loadComplete: timing.loadEventEnd - timing.navigationStart,
                    domInteractive: timing.domInteractive - timing.navigationStart
                };
            }
            return null;
        });
        
        // Take screenshot
        const screenshotPath = `tests/screenshots/local-detailed-${Date.now()}.png`;
        await page.screenshot({ 
            path: screenshotPath,
            fullPage: true 
        });
        
        // Network analysis
        const networkInfo = await page.evaluate(() => {
            if (window.performance && window.performance.getEntriesByType) {
                const resources = window.performance.getEntriesByType('resource');
                return {
                    totalResources: resources.length,
                    resourceTypes: resources.reduce((acc, resource) => {
                        const type = resource.name.split('.').pop()?.toLowerCase() || 'other';
                        acc[type] = (acc[type] || 0) + 1;
                        return acc;
                    }, {}),
                    totalTransferSize: resources.reduce((total, r) => total + (r.transferSize || 0), 0)
                };
            }
            return null;
        });
        
        const result = {
            timestamp: new Date().toISOString(),
            loadTime: loadTime,
            analysis: analysis,
            performance: performance,
            network: networkInfo,
            screenshot: screenshotPath
        };
        
        // Save results
        if (!fs.existsSync('tests/reports')) {
            fs.mkdirSync('tests/reports', { recursive: true });
        }
        
        fs.writeFileSync(
            'tests/reports/local-site-analysis.json', 
            JSON.stringify(result, null, 2)
        );
        
        // Display results
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${analysis.title}"`);
        console.log(`   URL: ${analysis.url}`);
        console.log(`   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: ${analysis.generator}`);
        console.log(`   –Ø–∑—ã–∫: ${analysis.lang || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${analysis.description || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log('\nüìà –°–¢–†–£–ö–¢–£–†–ê:');
        console.log(`   –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${analysis.hasMain ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${analysis.hasNav ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –§—É—Ç–µ—Ä: ${analysis.hasFooter ? '‚úÖ' : '‚ùå'}`);
        console.log('\nüî¢ –≠–õ–ï–ú–ï–ù–¢–´:');
        Object.entries(analysis.elements).forEach(([type, count]) => {
            console.log(`   ${type}: ${count}`);
        });
        console.log('\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:');
        console.log(`   –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}ms`);
        if (performance) {
            console.log(`   DOM –≥–æ—Ç–æ–≤: ${performance.domContentLoaded}ms`);
            console.log(`   –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${performance.loadComplete}ms`);
        }
        console.log('\nüìù –°–û–î–ï–†–ñ–ò–ú–û–ï:');
        console.log(`   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${analysis.bodyTextLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –°–æ–¥–µ—Ä–∂–∏—Ç Framer: ${analysis.containsFramer ? '‚úÖ' : '‚ùå'}`);
        console.log(`   –°–æ–¥–µ—Ä–∂–∏—Ç Divita: ${analysis.containsDivita ? '‚úÖ' : '‚ùå'}`);
        console.log('\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ' + screenshotPath);
        
        return result;
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return { error: error.message };
    } finally {
        await browser.close();
    }
}

analyzeLocalSite()
    .then(result => {
        console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        if (!result.error) {
            console.log('üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: tests/reports/local-site-analysis.json'); 
        }
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è:', error.message);
        process.exit(1);
    });
